name: Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 22

jobs:
  test:
    name: Test and lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Run type checking
        run: yarn build

  deploy:
    name: Deploy backend
    runs-on: ubuntu-latest
    needs: test
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install backend dependencies
        run: yarn install --frozen-lockfile --production=false

      - name: Build backend
        run: yarn run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist package.json yarn.lock deploy/
          
      - name: Deploy backend to EC2
        uses: easingthemes/ssh-deploy@main
        env:
          SOURCE: "deploy/"
          ARGS: "-rltgoDzvO --delete --exclude=node_modules --exclude=.git"
          SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.AWS_HOST }}
          REMOTE_USER: ${{ secrets.AWS_USER }}
          TARGET: "/home/ec2-user/barcelona-api"

      - name: Install production dependencies and restart service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            cd /home/ec2-user/barcelona-api
            yarn install --frozen-lockfile --production=true
            sudo systemctl restart nodeapi
            sudo systemctl status nodeapi --no-pager
